================================================================
BUGFIXES

* missing-eol mmap hang!

================================================================
TOP OF LIST

* v2.1.0:
  o perf
  o rs/fs -> csv
  o multichar rs/fs/ps for all formats
  o optimize csv read perf
  o double-quote feature -> dkvp

  o make a profiler proggy-pair for getline vs. psb/pkr for simple cat
  o rs/fs/ps from char to char* throughout
  o parameterize csv rs/fs
  o implement mmap-backed psb/pkr via vptr intf and profile that
  o RFC "there may be a header" -- ?!? use nidx-style integer-numbered columns?? --no-header?
  o DKVP double-quote support
  i still need separate csvlite/csv on output since the former tolerates heterogeneity

* dhms2sec and sec2dhms functions

* header-length data mismatch et. al: file/line

* homebrew

* .deb

----------------------------------------------------------------
little:

* hms etc.:
  o round cases for negints/negfloats
  o test cases from the online help
  o fix the 12.0.250000
  o more test cases
  o on hms2y, handle dd, mm:dd, and hh:mm:dd

* keystroke-saver for tsvlite i/o

* comma-number -- using locale?

* top-level make: c dir at top of PATH

* poki cover -> readme

================================================================
HN FEEDBACKS 2015-08-15 (https://news.ycombinator.com/item?id=10066742)

look-ats:
* cq?
* https://github.com/harelba/q
* https://github.com/google/crush-tools
* https://github.com/BurntSushi/xsv
* https://github.com/pydata/pandas/blob/master/pandas/io/tests/test_parsers.py
* https://drill.apache.org
* https://github.com/dbro/csvquote

xperf:
* post rust/go cmps

================================================================
FILE FORMATS

! CSV with no records output: somehow emit just the header. likewise consume same on input ...
  ... & be able to cat header-only input to header-only output.

* #1 HN-release-announcement ask is RFC-CSV -- which insists on CRLF
* Also should support CRLF for DKVP
* Also have been wanting to support multi-char I/O RS/FS/PS for some time now
* Note nidx, pprint, xtab are plain-text; CSV is structured including CRLF even
  on systems for which that is unnatural; DKVP I think of as plaintext but could
  be extended to have double-quote support just like CSV, and certainly could
  have CRLF support.

           rs            fs              ps
         +---------------------------------------------
  nidx   | LF/CRLF       fixed@sp*       N/A
  pprint | LF/CRLF       fixed@sp*       N/A
  xtab   | LFLF/CRLFCRLF fixed@LF/CRLF   fixed@sp*
  csv    | fixed@CRLF    fixed@comma     N/A
  dkvp   | LF/CRLF       varies[,;|etc]  varies[=:etc]
         +---------------------------------------------

So, to do:
* impl multichar RF/FS/PS across the board -- including RS CRLF DKVP in particular
* let CSVLITE handle simple quotes at least (no embedded comma, LF, double-double quote)
* let DKVP handle full-up CSV-style double quotes. maybe make a DKVPLITE with simple-quote feature.

================================================================
NEATEN

!! xxx's in the code

! copyright headers ...

* source hygiene: top-of-header comments, readme re memory management, etc.
* mmap cleanup, especially csv

================================================================
COOKBOOK

* doc w/ very specific examples of sed/grep/etc preprocessing to structurize semi-structured data (e.g. logs)

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
NIDX/DKVP/...:

* maybe have a mode where "a" (not "a=1") -> "a=" with dkvp and "1=a" with nidx? 3rd format? 3 flavors
  of one format??

* dkvp as generalization of nidx. restructure mlrwik to emphasize this.
  tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
  some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
  presumably with a different name.  something about "header with data" or
  "key with value"?? lower-cased only rather than making it an acronym?

* nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!

* maybe call dkvp labeled-index fmt
* definitely put nidx before dkvp in the mlrwik/formats page
* "index-numbered" -> "implicitly index-numbered" in mlrwik

================================================================
FUNCTIONS
? match   (b_ss)  (w/ regexes!!)
? gsub    (s_sss) (w/ regexes!!)
? index   (i_ss) -- not very useful unless there are functions which take an index as an argument ...
? bit ops (i_ii) & | ^ << >>
? log2, exp2

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsvlite --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out
* modulus operator
* strlen
* xtab i/o
* make should-fail machinery & use it for null-key dkvp cases.
* all mathlib funcs
* int/float/string
* roundm function: round to multiple of m
* boolean() function
* boolean-valued put, e.g. mlr put '$ok = $x <= 10'
* nullability cases, esp. sort, and math funcs
* join with het data
* join with mixed-format/separator (left vs. right)
* join with left/right-prefix
* mmap/stdio UTs; run all cases with --mmap and again with --no-mmap
* all __X_MAIN__ instances -> UT code (effectively all-but-dead code at present)

================================================================
DOC

* Note that PCA is better than OLS for roundoff error (sum of squares ...):
  grep red data/multicountdown.txt | head -n 13 | mlr --opprint stats2 -a linreg-ols -f t,count
  grep red data/multicountdown.txt | head -n 14 | mlr --opprint stats2 -a linreg-ols -f t,count

================================================================
IMPROVEMENTS

* free-flag for string mlrvals

* run go/d/etc on sprax & include #'s in perf pg, and/or rm xref in the latter & just post xlang perf #'s there
* link to gh/jk/m xlang impls ... and/or cardify their sources :) ... or maybe just link to gh/jk/m xlang dir
* ack c impl has been repeatedly optimized but even the original version (also cutc.c ...) outperforms

* make a -D for hash-collision stats ...

* update t1.rb including numeric sort; fix appropriateness of -t=

* mlr sort -f -nr x: probably should sweep through all subcmds & disallow args to start
  with '-'

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

================================================================
FYI

Semantic versioning:
Given a version number MAJOR.MINOR.PATCH, increment the:

* MAJOR version when you make incompatible API changes,
* MINOR version when you add functionality in a backwards-compatible manner, and
* PATCH version when you make backwards-compatible bug fixes.

Initial release:
https://news.ycombinator.com/item?id=10066742
v2.0.0:
https://news.ycombinator.com/item?id=10132831

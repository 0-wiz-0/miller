================================================================
BUGFIXES

:D

================================================================
TOP OF LIST

!!! minimal-double-quote CSV I/O
  - definition of minimal:
    o single system line-term char
    o handle existence of double-quotes
    o handle embedded comma
    o handle double-double inside?
    o do not handle CRLF
    o do not handle embedded newline
  - prework: mlrdoc links for release, pandas suite, the rfc
  - prework: mlrdoc info re csv/csvlite & the current status
  - minimal: handle embedded commas
  - design question for when to *produce* double quotes on output:
    ? only if has embedded comma
    ? always
    ? stickily from input, but yuck: requires propagation through lrec w/ was_quoted bit ... .
      easier for unmodified data (e.g. cat, sort, filter) but harder for modified data (put)
    ? cli opt for emit-always?
    ? poll users
    ? check the pandas suite
    ? check the rfc for advice -- this isn't a format question per se. issue is when
      to emit wrapped in quotes when *not* necessary.
  - defer to RFC compliance: embedded "" (escaped)
  - defer to RFC compliance: embedded newline
  - defer to RFC compliance: CRLF (needs char -> string RS, and associated getline handling ...)
  - easier to go full-up RFC w/o the middle step??

! RFC-compliant CSV I/O
  - extend current state-machine approach?
  - use a lemon grammar? make sure it works with streaming ...

* homebrew

* .deb

----------------------------------------------------------------
little:

* comma-number -- using locale?

* make it clear in the docs this is at present a purely ASCII tool. (unless by
  accident some things are somehow working with utf8 etc.)

* top-level make: c dir at top of PATH

* poki cover -> readme

================================================================
HN FEEDBACKS 2015-08-15

look-ats:
* cq?
* https://github.com/harelba/q
* https://github.com/google/crush-tools
* https://github.com/BurntSushi/xsv
* https://github.com/pydata/pandas/blob/master/pandas/io/tests/test_parsers.py
* https://drill.apache.org
* https://github.com/dbro/csvquote

xperf:
* post rust/go cmps

================================================================
NEATEN

!! xxx's in the code

! copyright headers ...

* source hygiene: top-of-header comments, readme re memory management, etc.
* mmap cleanup, especially csv

================================================================
COOKBOOK

* doc w/ very specific examples of sed/grep/etc preprocessing to structurize semi-structured data (e.g. logs)

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
NIDX/DKVP/...:

* maybe have a mode where "a" (not "a=1") -> "a=" with dkvp and "1=a" with nidx? 3rd format? 3 flavors
  of one format??

* dkvp as generalization of nidx. restructure mlrwik to emphasize this.
  tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
  some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
  presumably with a different name.  something about "header with data" or
  "key with value"?? lower-cased only rather than making it an acronym?

* nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!

* maybe call dkvp labeled-index fmt
* definitely put nidx before dkvp in the mlrwik/formats page
* "index-numbered" -> "implicitly index-numbered" in mlrwik

================================================================
FUNCTIONS
? match   (b_ss)  (w/ regexes!!)
? gsub    (s_sss) (w/ regexes!!)
? index   (i_ss) -- not very useful unless there are functions which take an index as an argument ...
? bit ops (i_ii) & | ^ << >>
? log2, exp2

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out
* modulus operator
* strlen
* xtab i/o
* make should-fail machinery & use it for null-key dkvp cases.
* all mathlib funcs
* int/float/string
* roundm function: round to multiple of m
* boolean() function
* boolean-valued put, e.g. mlr put '$ok = $x <= 10'
* nullability cases, esp. sort, and math funcs
* join with het data
* join with mixed-format/separator (left vs. right)
* join with left/right-prefix
* mmap/stdio UTs; run all cases with --mmap and again with --no-mmap
* all __X_MAIN__ instances -> UT code (effectively all-but-dead code at present)

================================================================
DOC

* Note that PCA is better than OLS for roundoff error (sum of squares ...):
  grep red data/multicountdown.txt | head -n 13 | mlr --opprint stats2 -a linreg-ols -f t,count
  grep red data/multicountdown.txt | head -n 14 | mlr --opprint stats2 -a linreg-ols -f t,count

================================================================
IMPROVEMENTS

* free-flag for string mlrvals

* run go/d/etc on sprax & include #'s in perf pg, and/or rm xref in the latter & just post xlang perf #'s there
* link to gh/jk/m xlang impls ... and/or cardify their sources :) ... or maybe just link to gh/jk/m xlang dir
* ack c impl has been repeatedly optimized but even the original version (also cutc.c ...) outperforms

* make a -D for hash-collision stats ...

* update t1.rb including numeric sort; fix appropriateness of -t=

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

================================================================
I8N


  $ mlr --csv cat p
  langue,nom,jour
  français,françois,vendredi

  $ mlr --csv --oxtab cat p
  langue français
  nom    françois
  jour   vendredi

  $ revlines p | mlr --csv --oxtab cat 
  français langue
  françois nom
  vendredi  jour

  $ revlines p | mlr --csv --opprint cat 
  français françois vendredi
  langue    nom       jour

================================================================
N.B. release announcement https://news.ycombinator.com/item?id=10066742 2015-08-15

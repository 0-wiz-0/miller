================================================================
! BUGFIXES !

* $ echo t=0 | mlr put '$y=sec2gmt($x)'   <-- explicitly nullify
  t=0,y=(null)

================================================================
FEATURES/+

!! mmap impl: csv
!! then: --mmap by default
!! mmap/stdio UTs; maybe run all cases with --mmap and again with --no-mmap

!! nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!
!! doc sub,sec2gmt,gmt2sec @ mlrwik. note fractional seconds are discarded due to clib.

!! update t1.rb including numeric sort; fix appropriateness of -t=

!! dkvp as generalization of nidx. restructure mlrwik to emphasize this.
   tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
   some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
   presumably with a different name.  something about "header with data" or
   "key with value"?? lower-cased only rather than making it an acronym?

   > maybe call dkvp labeled-index fmt

   > definitely put nidx before dkvp in the mlrwik/formats page

   > "index-numbered" -> "implicitly index-numbered" in mlrwik

----------------------------------------------------------------

! reprio rust/go/d post-tc
  -> macos tools install x 3
  -> file moves -> lang compares; perfcomp dir?
  -> move datadirs too ..... unify c & doc data dirs to parent?
  -> remove/coalesce/gzip the large data files

* readme @ each level incl. sof et al. @ base
  -> & perfopt: lrec_t not hashmap per se; stdio backings with minimal copying; mmap entirely; ... ?

! mlr sort CLI opt for choice of heap/merge/quick -- ?

* mod op (either c-like, or sane) and put into wikidoc if so.

? rip through filenames @ start & abend unless -f each: fail fast.

================================================================
NEATEN

!! xxx's in the code
* source hygiene: top-of-header comments, readme re memory management, etc.

* prune pix/ dir
* makefile go/d/rs stuff -> language-comparisons/ dir
* catc.c/catc0.c -> language-comparisons/ dir

* trawl around sysadmin docs etc. looking for more use-cases. not just data analysis or devops/logdive.

================================================================
ONLINE HELP

* put/filter: have a categorized function lister -- by string/math or arity, or some such ...

================================================================
IMPROVEMENTS

* pprint reader: read using field widths?!? with strip ... that would solve the embedded-whitespace problem.
  lmhsi: column name -> char index??
* null-handling everywhere!! :/

================================================================
TESTING
* xtab input & UTs for it
* ut cases: multifile & multimapper often. e.g. wrapping everything in cat then X then cat ...
* ut cases: make should-fail machinery & use it for null-key dkvp cases.

================================================================
DOC
* reference: be sure to include no-sql examples throughout
* mem-mgmt: streaming & as near stateless as possible. e.g. csv cat retains only the header line.
  dkvp cat completely stateless. stats1/2 retain only agg state. tac/sort/etc. obvious retain all lines.
  you can snarf a 20GB file with 4GB RAM no problem.
* performance: Go/D/Rust #'s ... also GH link from mlrwik
* maybe restore mem-mgmt page for dev-info? or a readme?!?
* meaneb: assumes uncorr. code/doc link to appxb :)
* cookbook page? random subsampling via urand()<0.001 ... what else ...
* doc-tech: emphasize in poki doc that nav is placed into callbacks for consistent all-in-one-place

================================================================
DATA
* move out of c dir ...

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
FCNS INCL. STRxTIME
? length     i_s_
! fmtnum     s_f_, s_i_
? strptime   f_s_
? strftime   s_f_, s_i_
? match      b_ss
? sub, gsub  s_sss (w/ regexes!!)
? index      i_ss
? bit ops & | ^ << >> ???    i_ii

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out

================================================================
INTERNAL DOCS (e.g. README)
* sllv==NULL vs. sllv_single(NULL); and mem-mgmt cmts thruout

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

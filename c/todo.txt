================================================================
! BUGFIXES !

================================================================
TOP OF LIST

* make a -D for hash-collision stats ...

* go through remaining functions to decide when null-through is ok.
* also document thoroughly. emphasize this is crucial for heterogeneous data.

* doc w/ very specific examples of sed/grep/etc preprocessing to structurize semi-structured data (e.g. logs)

! gh/jk/mlr top-level readme: replicate mlrdoc index.html content. *then* link.

!! booleans into put-dsl: should be able to do: mlr put '$ok = $x < 10'

* min/max functions: f_ff. need to impl null-loses logic.

* regularization mapper: when same names, reorder the same as 1st occurrence.
  e.g. one record w/ a,b,c & subsequent with a,c,b.

! maybe have a mode where "a" (not "a=1") -> "a=" with dkvp and "1=a" with nidx? 3rd format? 3 flavors
  of one format??

!! join
  -> cleanup of xxx cmts
  -> left/right-prefix UTs
  -> het UTs
  -> mixed-format/separator UT cases

!! mmap cleanup, especially csv
!! mmap/stdio UTs; run all cases with --mmap and again with --no-mmap
! doc stats1/stats2 accums via then-statements ...

-> fmtnum() function
   -> hex-fmt fcn ... maybe together w/ fmtnum
-> log2 & exp2?

!! update t1.rb including numeric sort; fix appropriateness of -t=

!! top-level notes: make -C c, & poki in poki dir. add poki chdir/out-of-pwd feature?

!! dkvp as generalization of nidx. restructure mlrwik to emphasize this.
   tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
   some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
   presumably with a different name.  something about "header with data" or
   "key with value"?? lower-cased only rather than making it an acronym?

   > maybe call dkvp labeled-index fmt

   > definitely put nidx before dkvp in the mlrwik/formats page

   > "index-numbered" -> "implicitly index-numbered" in mlrwik

? nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!

!! __X_MAIN__ -> UT code (effectively all-but-dead code at present)

----------------------------------------------------------------

! reprio rust/go/d post-tc
  -> macos tools install x 3. and/or just use sprax.

================================================================
NEATEN

!! xxx's in the code
* source hygiene: top-of-header comments, readme re memory management, etc.

* prune pix/ dir

* trawl around sysadmin docs etc. looking for more use-cases. not just data analysis or devops/logdive.

================================================================
IMPROVEMENTS

* pprint reader: read using field widths?!? with strip ... that would solve the embedded-whitespace problem.
  lmhsi: column name -> char index??
* null-handling everywhere!! :/
* free-flag for string mlrvals
* cubic approximation for invqnorm?

================================================================
DOC
* reference: be sure to include no-sql examples throughout
* mem-mgmt: streaming & as near stateless as possible. e.g. csv cat retains only the header line.
  dkvp cat completely stateless. stats1/2 retain only agg state. tac/sort/etc. obvious retain all lines.
  you can snarf a 20GB file with 4GB RAM no problem.
* meaneb: assumes uncorr. code/doc link to appxb :)
* cookbook page? random subsampling via urand()<0.001 ... what else ...
* doc-tech: emphasize in poki doc that nav is placed into callbacks for consistent all-in-one-place
* parlog sort / de-interleave example via stable sort on concurrency identifier
* time-left example for #todo as fcn of sumt, w/ linreg
* mlrwik readme note which copy of mlr; PATH

* sysadm example:
  $ each 1 "uptime | sed 's/,/ /g'" |  mlr --nidx --repifs --fs space step -a delta -f 11
   19:00:01 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 51.830000
   19:00:02 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 0.000000
   19:00:03 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 0.000000
   19:00:04 up 30 days 4:52 2 users load average: 52.40 48.83 32.22 0.570000

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
FUNCTIONS
! fmtnum     s_sf_, s_si_
? match      b_ss  (w/ regexes!!)
? sub, gsub  s_sss (w/ regexes!!)
? index      i_ss
? bit ops & | ^ << >> ???    i_ii

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out
* modulus operator
* strlen
* xtab i/o
* make should-fail machinery & use it for null-key dkvp cases.
* all mathlib funcs
* int/float/string

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

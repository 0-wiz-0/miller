================================================================
! BUGFIXES !

:D

================================================================
TOP OF LIST

* run go/d/etc on sprax & include #'s in perf pg, and/or rm xref in the latter & just post xlang perf #'s there
* link to gh/jk/m xlang impls ... and/or cardify their sources :) ... or maybe just link to gh/jk/m xlang dir
* ack c impl has been repeatedly optimized but even the original version (also cutc.c ...) outperforms

* make a -D for hash-collision stats ...

* doc w/ very specific examples of sed/grep/etc preprocessing to structurize semi-structured data (e.g. logs)

* update t1.rb including numeric sort; fix appropriateness of -t=

================================================================
NEATEN

!! xxx's in the code

! copyright headers ...

* source hygiene: top-of-header comments, readme re memory management, etc.
* mmap cleanup, especially csv

* prune pix/ dir
* trawl around sysadmin docs etc. looking for more use-cases. not just data analysis or devops/logdive.

================================================================
IMPROVEMENTS

* pprint reader: read using field widths?!? with strip ... that would solve the embedded-whitespace problem.
  lmhsi: column name -> char index??
* free-flag for string mlrvals

================================================================
DOC
* reference: be sure to include no-sql examples throughout
* mem-mgmt: streaming & as near stateless as possible. e.g. csv cat retains only the header line.
  dkvp cat completely stateless. stats1/2 retain only agg state. tac/sort/etc. obvious retain all lines.
  you can snarf a 20GB file with 4GB RAM no problem.
* meaneb: assumes uncorr. code/doc link to appxb :)
* parlog sort / de-interleave example via stable sort on concurrency identifier
* time-left example for #todo as fcn of sumt, w/ linreg
* mlrwik readme note which copy of mlr; PATH

* sysadm example:
  $ each 1 "uptime | sed 's/,/ /g'" |  mlr --nidx --repifs --fs space step -a delta -f 11
   19:00:01 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 51.830000
   19:00:02 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 0.000000
   19:00:03 up 30 days 4:52 2 users load average: 51.83 48.66 32.08 0.000000
   19:00:04 up 30 days 4:52 2 users load average: 52.40 48.83 32.22 0.570000

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
NIDX/DKVP/...:

* maybe have a mode where "a" (not "a=1") -> "a=" with dkvp and "1=a" with nidx? 3rd format? 3 flavors
  of one format??

* dkvp as generalization of nidx. restructure mlrwik to emphasize this.
  tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
  some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
  presumably with a different name.  something about "header with data" or
  "key with value"?? lower-cased only rather than making it an acronym?

* nidx via field widths; left/right space-strip -- *only* if headers also don't have whitespace!!!

* maybe call dkvp labeled-index fmt
* definitely put nidx before dkvp in the mlrwik/formats page
* "index-numbered" -> "implicitly index-numbered" in mlrwik

================================================================
FUNCTIONS
? match b_ss  (w/ regexes!!)
? gsub  s_sss (w/ regexes!!)
? index i_ss -- not very useful unless there are functions which take an index as an argument ...
? bit ops & | ^ << >> ???    i_ii
? log2, exp2

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out
* modulus operator
* strlen
* xtab i/o
* make should-fail machinery & use it for null-key dkvp cases.
* all mathlib funcs
* int/float/string
* roundm function: round to multiple of m
* boolean() function
* boolean-valued put, e.g. mlr put '$ok = $x <= 10'
* nullability cases, esp. sort, and math funcs
* join with het data
* join with mixed-format/separator (left vs. right)
* join with left/right-prefix
* mmap/stdio UTs; run all cases with --mmap and again with --no-mmap
* all __X_MAIN__ instances -> UT code (effectively all-but-dead code at present)

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??

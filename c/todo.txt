================================================================
! BUGFIXES !

* --ofmt ignored in put. perhaps best to reglobalize.

================================================================
FEATURES
!! quantiles !!
   -> be sure to include p99/p50 example (with then-chaining) in mlrwik
!! mode

!! reminder pgr legend is broken !!
  http://en.wikipedia.org/wiki/Order_statistic_tree
!! dkvp as generalization of nidx. restructure mlrwik to emphasize this.
   tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
   some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
   presumably with a different name.  something about "header with data" or
   "key with value"?? lower-cased only rather than making it an acronym?

! sub function. e.g. "300ms" -> "300"
! ordered cut (a la reorder). either a new command (yeck) or cut option (e.g. cut -o)
* stats1 mode: lhmsi & then sort. what about "1"=="1.0"?
* mod op (either c-like, or sane) and put into wikidoc if so.
* linreg-quality 2nd pass -- code it up in stats2 w/ -m {m} -b {b} -- ?

================================================================
NEATEN

* prune pix/ dir
* makefile go/d/rs stuff -> language-comparisons/ dir
* catc.c/catc0.c -> language-comparisons/ dir
* remove/coalesce/gzip the large data files
* mk perfcomp dir
* "index-numbered" -> "implicitly index-numbered" in mlrwik
* source hygiene: xxx's, top-of-header comments, readme re memory management, etc.
* "level_1", "level_2", etc. are just confusing. come up with more descriptive names.
* rip through filenames @ start & abend unless -f each.
* play with python sketch.py (& rename -- mlr.py??) & make sure it's at least usable for something
* put uniq & count-distinct into the same file. then rm extraneous extern @ .h

! re-do mlr sort -n stats in t1.rb -> mlrwik

* trawl around sysadmin docs etc. looking for more use-cases. not just data analysis or devops/logdive.

================================================================
ONLINE HELP
* then-chaining note into mlr online help
* jko mlrdoc & gh/jk/mlr urls into mlr online help
* put/filter: have a categorized function lister -- by string/math or arity, or some such ...

================================================================
IMPROVEMENTS
* pprint reader: read using field widths?!? with strip ... that would solve the embedded-whitespace problem.
  lmhsi: column name -> char index??
* xtab -> vtab everywhere? (code+doc)
* null-handling everywhere!! :/
* 80-column-wrap slls printer (for mlr --help)
* char -> char* for RS/FS/PS. then, NEWLINENEWLINE + repifs -> xtab is a more or less special case of dkvp.
  BUT this makes mlr_get_line harder :/
* ofmts for stepper/stats1/stats2 *defaulting* to global ofmt
* mlr sort CLI opt for choice of heap/merge/quick -- ?

================================================================
TESTING
* xtab input & UTs for it
* CSV uts
* reorder UTs per se in test_lrec
* reorder reg-test cases
* ut cases: multifile & multimapper often. e.g. wrapping everything in cat then X then cat ...
* ut cases: make should-fail machinery & use it for null-key dkvp cases.
* ut case for stats1 mode

================================================================
DOC
* doc: to-do page e.g. multi-char separators (harder for getline); quantiles; what else.
* doc: reference: be sure to include no-sql examples throughout
* doc: mem-mgmt: streaming & as near stateless as possible. e.g. csv cat retains only the header line.
  dkvp cat completely stateless. stats1/2 retain only agg state. tac/sort/etc. obvious retain all lines.
  you can snarf a 20GB file with 4GB RAM no problem.
* doc: performance: Go/D/Rust ...
* doc: intro note about more structuring: grep/sed/ruby/perl/sed etc. for some structuring, then pipe to miller?
* doc: maybe restore mem-mgmt page for dev-info? or a readme?!?
* doc: somewhere in mlrwik put perf-stat analysis (my tn.rb)
* doc: somewhere in mlrwik put some realistic log-dive data -- not abixy & not just resource/ok.
* doc: at the top link to data/small/etc. make small.txt hardlinks for browser download.
* doc: rename data/big to data/large or data/1m everywhere (code+doc)
* doc: section on to-do things, e.g. multichar rs/fs/ps; & regexes; & quantiles
* put colored-shapes.dkvp in more places in wikset
* ref to http://datapipes.okfnlabs.org/
* emph all variables are stream variables and all functions are stream functions

* t1.rb & mlrwik perfdoc:

  kerl@kerl-mbp[s2j0d1][c]$ time sort -k 1 -k 2 -k 3 -k 4 -k 5 data/big > /dev/null
  real  0m20.453s
  user  0m20.384s
  sys 0m0.062s

  kerl@kerl-mbp[s0j0d1][c]$ time mlr sort -f a,b,i,x,y data/big > /dev/null
  real  0m6.966s
  user  0m6.559s
  sys 0m0.398s

  kerl@kerl-mbp[s0j0d1][c]$ time mlr sort -f a,b -n i,x,y data/big > /dev/null
  real  0m8.053s
  user  0m7.643s
  sys 0m0.401s

================================================================
PERF

* try mmap(2) for non-stdin case. 1st experiment w/ catc.c.

================================================================
DATA
* move out of c dir ...

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?

================================================================
FCNS INCL. STRxTIME
? length     i_s_
! fmtnum     s_f_, s_i_
? strptime   f_s_
? strftime   s_f_, s_i_
? match      b_ss
? sub, gsub  s_sss (w/ regexes!!)
? index      i_ss
? bit ops & | ^ << >> ???    i_ii

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* put & filter
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out

================================================================
I/O
? right-align only some in --opprint?

================================================================
INTERNAL DOCS (e.g. README)
* sllv==NULL vs. sllv_single(NULL); and mem-mgmt cmts thruout

================================================================
HARDER HYGIENE
* eliminate compiler warnings for *.l/*.y/etc.

================================================================
PYTHON
* pgr + stats_m same I/O modules??

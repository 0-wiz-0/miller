================================================================
! BUGFIXES !

... :D

================================================================
FEATURES

!! update t1.rb including numeric sort; fix appropriateness of -t=

!! reminder pgr legend is broken !!
  http://en.wikipedia.org/wiki/Order_statistic_tree

!! dkvp as generalization of nidx. restructure mlrwik to emphasize this.
   tightly integrate 'mlr label'. maybe rename 'mlr label' to 'mlr name' or
   some such.  perhaps entirely coalesce nidx&dkvp in the code & the docs;
   presumably with a different name.  something about "header with data" or
   "key with value"?? lower-cased only rather than making it an acronym?

   > maybe call dkvp labeled-index fmt

   > definitely put nidx before dkvp in the mlrwik/formats page

!! use 1-(|l2|/|l1|)^2 as pca quality metric? verify against r2 in munch plots.
  -> after pgr legend fix

! sub function. e.g. "300ms" -> "300"

! ordered cut (a la reorder). either a new command (yeck) or cut option (e.g. cut -o)

* stats1 mode: what about "1"=="1.0"? doc this, or impl option
  w/ temporary sscanf & reformat @ maxlen

* mod op (either c-like, or sane) and put into wikidoc if so.

* linreg-quality 2nd pass -- code it up in stats2 w/ -m {m} -b {b} -- ?

* RV-coefficient -- ?

* jko mlrdoc & gh/jk/mlr urls into mlr online help

* more about I/O and OFMT options @ online help

================================================================
NEATEN

!! xxx's in the code
* source hygiene: top-of-header comments, readme re memory management, etc.
* check all usage messages

* prune pix/ dir
* makefile go/d/rs stuff -> language-comparisons/ dir
* catc.c/catc0.c -> language-comparisons/ dir
* remove/coalesce/gzip the large data files
* mk perfcomp dir
* "index-numbered" -> "implicitly index-numbered" in mlrwik
* rip through filenames @ start & abend unless -f each: fail fast.
* play with python sketch.py (& rename -- mlr.py??) & make sure it's at least usable for something

* trawl around sysadmin docs etc. looking for more use-cases. not just data analysis or devops/logdive.

* doc-tech: make sure all html stylings are moved into css
* doc-tech: emphasize in poki doc that nav is place into callbacks for consistent all-in-one-place

================================================================
ONLINE HELP

* then-chaining note into mlr online help
* put/filter: have a categorized function lister -- by string/math or arity, or some such ...

================================================================
IMPROVEMENTS
* pprint reader: read using field widths?!? with strip ... that would solve the embedded-whitespace problem.
  lmhsi: column name -> char index??
* null-handling everywhere!! :/
* 80-column-wrap slls printer (for mlr --help)
* char -> char* for RS/FS/PS. then, NEWLINENEWLINE + repifs -> xtab is a more or less special case of dkvp.
  BUT this makes mlr_get_line harder :/
* mlr sort CLI opt for choice of heap/merge/quick -- ?

================================================================
TESTING
* xtab input & UTs for it
* ut cases: multifile & multimapper often. e.g. wrapping everything in cat then X then cat ...
* ut cases: make should-fail machinery & use it for null-key dkvp cases.

================================================================
DOC
* doc: reference: be sure to include no-sql examples throughout
* doc: mem-mgmt: streaming & as near stateless as possible. e.g. csv cat retains only the header line.
  dkvp cat completely stateless. stats1/2 retain only agg state. tac/sort/etc. obvious retain all lines.
  you can snarf a 20GB file with 4GB RAM no problem.
* doc: performance: Go/D/Rust #'s ... also GH link from mlrwik
* doc: intro note about more structuring: grep/sed/ruby/perl/sed etc. for some structuring, then pipe to miller?
* doc: maybe restore mem-mgmt page for dev-info? or a readme?!?
* doc: somewhere in mlrwik put some realistic log-dive data -- not abixy & not just resource/ok.
* doc: at the top link to data/small/etc. make small.txt hardlinks for browser download.
* emph all variables are stream variables and all functions are stream functions

================================================================
PERF

* try mmap(2) for non-stdin case. 1st experiment w/ catc.c, & make a cutc.c.

================================================================
DATA
* move out of c dir ...

================================================================
MEM MGMT:

* full void-star-payload frees
* multi-level frees in stats1/stats2/step subcmds (control-plane structures)
* multi-level frees in stats1/stats2/step hashmaps (data-plane structures)
* _free funcptr/funcs for mappers
* free last rec in streamer?
* look strdups at other lhm*
* look at any other strdups

================================================================
FCNS INCL. STRxTIME
? length     i_s_
! fmtnum     s_f_, s_i_
? strptime   f_s_
? strftime   s_f_, s_i_
? match      b_ss
? sub, gsub  s_sss (w/ regexes!!)
? index      i_ss
? bit ops & | ^ << >> ???    i_ii

================================================================
UT/REG
* general coverage
  - include -D__XXX_MAIN__ content
* cat/X/cat for all X
* tac/X/cat for all X
* cat/X/tac for all X
* tac/X/tac for all X
* multi-csv I/O: include --icsv --odkvp and --idkvp --ocsv, as well as --csv cases
* het-xtab out

================================================================
I/O
? right-align only some in --opprint?

================================================================
INTERNAL DOCS (e.g. README)
* sllv==NULL vs. sllv_single(NULL); and mem-mgmt cmts thruout

================================================================
HARDER HYGIENE
* eliminate compiler warnings for lemon & its autogenerated code

================================================================
PYTHON
* pgr + stats_m same I/O modules??
